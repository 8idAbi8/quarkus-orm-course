/*
The ArtistRepository class serves as a repository for interacting with an SQL database to persist and retrieve Artist entities.
*/

package quarkus.jdbc;

import jakarta.enterprise.context.ApplicationScoped;
import jakarta.inject.Inject;

import javax.sql.DataSource;
import java.sql.*;
import java.util.Random;

@ApplicationScoped  // there will be only one instance of ArtistRepository shared across the application
public class ArtistRepository {

    @Inject
    DataSource dataSource; // inject a DataSource, which is used to establish a connection to the database.

    /*
    * This method is responsible for persisting an Artist object into the database.
    It obtains a connection to the database using the injected DataSource.
    Prepares an SQL insert statement with placeholders for values (id, name, bio, created_date).
    Generates a random id for the artist, sets it, and binds other artist attributes to the SQL statement.
    Executes the SQL statement using a PreparedStatement.
    Closes the connection after executing the statement.
    * */
    public void persist(Artist artist) throws SQLException {
        // connect to the db
        Connection connection = dataSource.getConnection(); // obtains a connection to the database // throws java.sql.SQLException

        /* We need a sql query for the persist method. We insert all the values per column, and pass the values as parameters(?) */
        String sql = "INSERT INTO t_artists (id, name, bio, created_date) VALUES (?, ?, ?, ?)";

        // set the identifier
        artist.setId(Math.abs(new Random().nextLong()));

        /*An object that represents a precompiled SQL statement.
        A SQL statement is precompiled and stored in a PreparedStatement object.
        This object can then be used to efficiently execute this statement multiple times*/
        try (PreparedStatement ps = connection.prepareStatement(sql)){
            // bind each attribure to each value of the sql statement
            ps.setLong(1, artist.getId());
            ps.setString(2, artist.getName());
            ps.setString(3, artist.getBio());
            ps.setTimestamp(4, Timestamp.from(artist.getCreatedDate()));
            ps.executeUpdate();
        }
        connection.close();
    }



    /*
    * This method retrieves an Artist by its id from the database.
    It obtains a connection to the database using the injected DataSource.
    Prepares an SQL select statement to retrieve an artist by the provided id.
    Binds the id to the SQL statement, executes it, and retrieves the artist details from the ResultSet.
    Closes the connection after executing the statement and returns the retrieved Artist.
    * */
    public Artist findById(Long id) throws SQLException {
        Connection connection = dataSource.getConnection(); // a java.sql.Connection object, is established using a JDBC driver

        // select * where id equals the parameter that we will pass
        String sql = "SELECT id, name, bio, created_date FROM t_artists WHERE id = ?";

        Artist artist = new Artist();

        /* try-with-resources statement, ensuring that the PreparedStatement (ps) and ResultSet (rs) are automatically closed at the end of the block.*/
        /* prepareStatement(sql): is a method of the Connection interface in JDBC.
           It prepares an SQL statement for execution and returns a PreparedStatement object that represents the precompiled SQL statement.
           The statement is stored in the PreparedStatement object and can be efficiently executed multiple times with different parameter values. */
        try (PreparedStatement ps = connection.prepareStatement(sql)) {
            ps.setLong(1, id);      // the 1 is the parameter index. It represents the position of the parameter in the SQL query.

            /* ps.executeQuery(): Executes the SQL query in this PreparedStatement object (ps) and returns the ResultSet object (rs) generated by the query
            * executeQuery(): method provided by the PreparedStatement interface in Java. It is used to execute a SQL SELECT statement and retrieve the resulting rows as a ResultSet.
            * ResultSet is an interface in Java that represents the result set of a database query. It provides methods to navigate through the result set and retrieve data.
            * ps.executeQuery(): the SQL query represented by the PreparedStatement (ps) is executed against the database */
            ResultSet rs = ps.executeQuery();

            /* if block that processes the result of a database query
            * rs.next() moves the cursor to the next row in the result set. It returns true if there is a row and positions the cursor on it; otherwise, it returns false.*/
            if (rs.next()) {
                /*The data is extracted from the result set using various ResultSet methods.
                * ex: rs.getLong(1) retrieves the value of the first column (column index 1) as a long and sets it as the artist's ID using artist.setId().*/
                artist.setId(rs.getLong(1));
                artist.setName(rs.getString(2));
                artist.setBio(rs.getString(3));
                artist.setCreatedDate(rs.getTimestamp(4).toInstant());
            }
        }
        connection.close();
        return artist;
    }
}
